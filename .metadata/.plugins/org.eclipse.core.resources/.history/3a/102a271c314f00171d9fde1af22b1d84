package cmsc420.meeshquest.part1;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


import cmsc420.drawing.CanvasPlus;
import cmsc420.xml.XmlUtility;
import org.w3c.dom.Element;

public class Parser {
	public Frame frame;
	TreeMap<String,Cities> nameMap=new TreeMap<String,Cities>(new CityNameComparator());
	TreeMap<Cities,String> coordMap=new TreeMap<Cities,String>(new CoordinateCompartor());
	PRQuadTree<Cities> quadMap;
	CanvasPlus canvas;
	
	
	public void initialize(Integer width, Integer height) {
		frame=new Frame(0,0,width,height);
		quadMap=new PRQuadTree<Cities>(frame);
		this.canvas = new CanvasPlus("MeeshQuest", width, height);
		this.canvas.addRectangle(0,0,width,height, Color.BLACK, false);
	}
	
	
	public void CreateCity(Element commandNode,Document results,Element first) {
		String cityname=commandNode.getAttribute("name");
		int coordx=Integer.parseInt(commandNode.getAttribute("x"));
		int coordy=Integer.parseInt(commandNode.getAttribute("y"));
		int cityradius=Integer.parseInt(commandNode.getAttribute("radius"));
		String citycolor=commandNode.getAttribute("color");
		/*create an instance of new city*/
		Cities newcity=new Cities(cityname,coordx,coordy,cityradius,citycolor);
		/*deal with error types according to page 17*/
		boolean flag=false;
		if (nameMap.containsKey(newcity.name)) {
			flag=true;
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element name = results.createElement("name");
			Element x = results.createElement("x");
			Element y = results.createElement("y");
			Element radius = results.createElement("radius");
			Element color = results.createElement("color");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			error.setAttribute("type", "duplicateCityName");
			command.setAttribute("name", "createCity");
			parameters.appendChild(name);
			parameters.appendChild(x);
			parameters.appendChild(y);
			parameters.appendChild(radius);
			parameters.appendChild(color);
			name.setAttribute("value", newcity.name);
			x.setAttribute("value", String.valueOf((int) newcity.x));
			y.setAttribute("value", String.valueOf((int) newcity.y));
			radius.setAttribute("value", String.valueOf(newcity.radius));
			color.setAttribute("value", String.valueOf(newcity.color));       					
			
		} else{      				
			for(Cities city: coordMap.keySet()) {
				if (city.x ==newcity.x && city.y ==newcity.y) {
					Element error = results.createElement("error");
					Element parameters = results.createElement("parameters");
					Element command = results.createElement("command");
					Element name = results.createElement("name");
					Element x = results.createElement("x");
					Element y = results.createElement("y");
					Element radius = results.createElement("radius");
					Element color = results.createElement("color");
					first.appendChild(error);
					error.appendChild(command);
					error.appendChild(parameters);
					error.setAttribute("type", "duplicateCityCoordinates");
					command.setAttribute("name", "createCity");
					parameters.appendChild(name);
					parameters.appendChild(x);
					parameters.appendChild(y);
					parameters.appendChild(radius);
					parameters.appendChild(color);
					name.setAttribute("value", newcity.name);
					x.setAttribute("value", String.valueOf((int) newcity.x));
					y.setAttribute("value", String.valueOf((int) newcity.y));
					radius.setAttribute("value", String.valueOf(newcity.radius));
					color.setAttribute("value", String.valueOf(newcity.color));
					flag=true;
					break;
				}
			}
			if(flag==false) {
			/*store values into both two maps*/
			nameMap.put(cityname, newcity);
			coordMap.put(newcity, cityname);
			/*prepare output results*/
			Element success = results.createElement("success");
			Element command = results.createElement("command");
			Element parameters = results.createElement("parameters");
			Element output = results.createElement("output");
			Element name = results.createElement("name");
			Element x = results.createElement("x");
			Element y = results.createElement("y");
			Element radius = results.createElement("radius");
			Element color = results.createElement("color");
			/*append everything after first in order*/
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			parameters.appendChild(name);
			parameters.appendChild(x);
			parameters.appendChild(y);
			parameters.appendChild(radius);
			parameters.appendChild(color);
			success.appendChild(output);
			/*set attributes for commands*/
			command.setAttribute("name", "createCity");
			name.setAttribute("value", newcity.name);
			x.setAttribute("value", String.valueOf((int) newcity.x));
			y.setAttribute("value", String.valueOf((int) newcity.y));
			radius.setAttribute("value", String.valueOf(newcity.radius));
			color.setAttribute("value", String.valueOf(newcity.color));
		}
		}
	}
	
	public void ListCities(Element commandNode,Document results,Element first) {
		/*deal with empty map exception according to page 19*/
		if(nameMap.isEmpty() || coordMap.isEmpty()) {
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element sortBy=results.createElement("sortBy");
			sortBy.setAttribute("value", commandNode.getAttribute("sortBy"));
			error.setAttribute("type", "noCitiesToList");
			command.setAttribute("name", "listCities");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			parameters.appendChild(sortBy);
		}else if(commandNode.getAttribute("sortBy").equals("name")) {
			/*create new map in reverse order and reallocation*/
			TreeMap<String, Cities> newMap = new TreeMap<String,Cities>(Collections.reverseOrder(new CityNameComparator()));
			newMap.putAll(nameMap);
			/*we use new map and prepare output results */
			Element success = results.createElement("success");
			Element command = results.createElement("command");
			Element parameters = results.createElement("parameters");
			Element cityList = results.createElement("cityList");
			Element city = results.createElement("city");
			Element sortBy = results.createElement("sortBy");
			Element output = results.createElement("output");
			/*append everything after first*/
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			parameters.appendChild(sortBy);
			success.appendChild(output);
			output.appendChild(cityList);
			/*set commands attributes*/
			command.setAttribute("name", "listCities");
		sortBy.setAttribute("value", "name");
			Iterator<Cities> it=newMap.values().iterator();
			/*use iterator traverse through the tree values*/
			while(it.hasNext()){
				Cities next = it.next();
				city.setAttribute("name", next.name);
				city.setAttribute("x", String.valueOf((int) next.x));
				city.setAttribute("y", String.valueOf((int) next.y));
				city.setAttribute("radius", String.valueOf(next.radius));
				city.setAttribute("color", next.color);
				cityList.appendChild(city);
				city = results.createElement("city");
			}
		}else {
			/*same as previous*/
			TreeMap<Cities, String> newMap = new TreeMap<Cities,String>(new CoordinateCompartor());
			newMap.putAll(coordMap);
			Element success = results.createElement("success");
			Element command = results.createElement("command");
			Element parameters = results.createElement("parameters");
			Element cityList = results.createElement("cityList");
			Element city = results.createElement("city");
			Element sortBy = results.createElement("sortBy");
			Element output = results.createElement("output");
			command.setAttribute("name", "listCities");
			sortBy.setAttribute("value", "coordinate");
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			parameters.appendChild(sortBy);
			success.appendChild(output);
			output.appendChild(cityList);
			/*use iterator traverse through the tree keys*/
			Iterator<Cities> it=newMap.keySet().iterator();
			while(it.hasNext()){
				Cities next = it.next();
				city.setAttribute("name", next.name);
				city.setAttribute("x", String.valueOf((int) next.x));
				city.setAttribute("y", String.valueOf((int) next.y));
				city.setAttribute("radius", String.valueOf(next.radius));
				city.setAttribute("color", next.color);
				cityList.appendChild(city);
				city = results.createElement("city");
			}
		}
	}
	
	public void ClearAll(Element commandNode,Document results,Element first) {
		nameMap.clear();
		coordMap.clear();
		quadMap.clear();
		Element success = results.createElement("success");
		Element command = results.createElement("command");
		Element parameters = results.createElement("parameters");
		Element output = results.createElement("output");
		command.setAttribute("name", "clearAll");
		first.appendChild(success);
		success.appendChild(command);
		success.appendChild(parameters);
		success.appendChild(output);
	}

	public void mapCity(Element commandNode, Document results, Element first) {
		String cityname=commandNode.getAttribute("name");
		if(!nameMap.containsKey(cityname)) {
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element name = results.createElement("name");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			error.setAttribute("type", "nameNotInDictionary");
			command.setAttribute("name", "mapCity");
			parameters.appendChild(name);
			name.setAttribute("value", cityname);     					
		}else {
			Cities mapcity=nameMap.get(cityname);
			if(quadMap.contains(cityname)) {
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element name = results.createElement("name");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			error.setAttribute("type", "cityAlreadyMapped");
			command.setAttribute("name", "mapCity");
			parameters.appendChild(name);
			name.setAttribute("value", cityname);
			}else if(mapcity.x<0 ||mapcity.y<0 || mapcity.x>=frame.x2 ||mapcity.y>=frame.y2) {
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element name = results.createElement("name");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			error.setAttribute("type", "cityOutOfBounds");
			command.setAttribute("name", "mapCity");
			parameters.appendChild(name);
			name.setAttribute("value", mapcity.name);
			}else {
			quadMap.insert(mapcity);
			Element success = results.createElement("success");
			Element command = results.createElement("command");
			Element parameters = results.createElement("parameters");
			Element output = results.createElement("output");
			Element name = results.createElement("name");
			/*Element x = results.createElement("x");
			Element y = results.createElement("y");
			Element radius = results.createElement("radius");
			Element color = results.createElement("color");*/
			/*append everything after first in order*/
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			parameters.appendChild(name);
			/*parameters.appendChild(x);
			parameters.appendChild(y);
			parameters.appendChild(radius);
			parameters.appendChild(color);*/
			success.appendChild(output);
			/*set attributes for commands*/
			command.setAttribute("name", "mapCity");
			name.setAttribute("value", mapcity.name);
			/*
			x.setAttribute("value", String.valueOf((int) mapcity.x));
			y.setAttribute("value", String.valueOf((int) mapcity.y));
			radius.setAttribute("value", String.valueOf(mapcity.radius));
			color.setAttribute("value", String.valueOf(mapcity.color));*/
		}
		}
	}


	public void printTree(Element commandNode, Document results, Element first) {
		if (quadMap.isEmpty()) {
			Element error = results.createElement("error");
			Element command = results.createElement("command");
			Element parameters= results.createElement("parameters");
			error.setAttribute("type", "mapIsEmpty");
			command.setAttribute("name", "printPRQuadtree");
			error.appendChild(command);
			error.appendChild(parameters);
			first.appendChild(error);
		}else {
		Element success = results.createElement("success");
		Element command = results.createElement("command");
		command.setAttribute("name", "printPRQuadtree");
		Element parameters= results.createElement("parameters");
		Element output = results.createElement("output");
		Element quadTree = results.createElement("quadtree");
		output.appendChild(quadTree);
		success.appendChild(command);
		success.appendChild(parameters);
		success.appendChild(output);
		first.appendChild(success);
		quadMap.printTree(quadTree, results);
		}
	}


	public void unmapCity(Element commandNode, Document results, Element first) {
		String cityname=commandNode.getAttribute("name");
		if(!nameMap.containsKey(cityname)) {
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element name = results.createElement("name");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			error.setAttribute("type", "nameNotInDictionary");
			command.setAttribute("name", "unmapCity");
			parameters.appendChild(name);
			name.setAttribute("value", cityname);
		}else {
			Cities unmapcity=nameMap.get(cityname);
			if(!quadMap.contains(cityname)) {
				Element error = results.createElement("error");
				Element parameters = results.createElement("parameters");
				Element command = results.createElement("command");
				Element name = results.createElement("name");
				first.appendChild(error);
				error.appendChild(command);
				error.appendChild(parameters);
				error.setAttribute("type", "cityNotMapped");
				command.setAttribute("name", "unmapCity");
				parameters.appendChild(name);
				name.setAttribute("value", cityname);
			}else {
				quadMap.remove(unmapcity);
				Element success = results.createElement("success");
				Element command = results.createElement("command");
				Element parameters = results.createElement("parameters");
				Element output = results.createElement("output");
				Element name = results.createElement("name");
				/*Element x = results.createElement("x");
				Element y = results.createElement("y");
				Element radius = results.createElement("radius");
				Element color = results.createElement("color");*/
				/*append everything after first in order*/
				first.appendChild(success);
				success.appendChild(command);
				success.appendChild(parameters);
				parameters.appendChild(name);
				/*parameters.appendChild(x);
				parameters.appendChild(y);
				parameters.appendChild(radius);
				parameters.appendChild(color);*/
				success.appendChild(output);
				/*set attributes for commands*/
				command.setAttribute("name", "unmapCity");
				name.setAttribute("value", unmapcity.name);
				/*
				x.setAttribute("value", String.valueOf((int) mapcity.x));
				y.setAttribute("value", String.valueOf((int) mapcity.y));
				radius.setAttribute("value", String.valueOf(mapcity.radius));
				color.setAttribute("value", String.valueOf(mapcity.color));*/
			}
		}
	}


	public void deleteCity(Element commandNode, Document results, Element first) {
		String cityname=commandNode.getAttribute("name");
		if(!nameMap.containsKey(cityname)) {
			Element error = results.createElement("error");
			Element parameters = results.createElement("parameters");
			Element command = results.createElement("command");
			Element name = results.createElement("name");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			error.setAttribute("type", "cityDoesNotExist");
			command.setAttribute("name", "deleteCity");
			parameters.appendChild(name);
			name.setAttribute("value", cityname);
		}else {
			Cities deletecity=nameMap.get(cityname);
			if(quadMap.contains(cityname)) {
				quadMap.remove(deletecity);
				nameMap.remove(cityname);
				coordMap.remove(deletecity);
				Element success = results.createElement("success");
				Element command = results.createElement("command");
				Element parameters = results.createElement("parameters");
				Element output = results.createElement("output");
				Element name = results.createElement("name");
				Element cityUnmapped=results.createElement("cityUnmapped");
				output.appendChild(cityUnmapped);
				first.appendChild(success);
				success.appendChild(command);
				success.appendChild(parameters);
				parameters.appendChild(name);
				success.appendChild(output);
				command.setAttribute("name", "deleteCity");
				name.setAttribute("value", deletecity.name);
				output.appendChild(cityUnmapped);
				cityUnmapped.setAttribute("name", deletecity.name);
				cityUnmapped.setAttribute("color", deletecity.color);
				cityUnmapped.setAttribute("radius", String.valueOf(deletecity.radius));
				cityUnmapped.setAttribute("x", String.valueOf((int) deletecity.x));
				cityUnmapped.setAttribute("y", String.valueOf((int) deletecity.y));
			}else {
				nameMap.remove(cityname);
				coordMap.remove(deletecity);
			}
			Element success = results.createElement("success");
			Element command = results.createElement("command");
			Element parameters = results.createElement("parameters");
			Element output = results.createElement("output");
			Element name = results.createElement("name");
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			parameters.appendChild(name);
			success.appendChild(output);
			command.setAttribute("name", "deleteCity");
			name.setAttribute("value", deletecity.name);
		}
	}


	public void saveMap(Element commandNode, Document results, Element first) {
		String filename=commandNode.getAttribute("name");
		Element success = results.createElement("success");
		Element command = results.createElement("command");
		Element parameters = results.createElement("parameters");
		Element output = results.createElement("output");
		Element name = results.createElement("name");
		first.appendChild(success);
		success.appendChild(command);
		success.appendChild(parameters);
		parameters.appendChild(name);
		success.appendChild(output);
		command.setAttribute("name", "saveMap");
		name.setAttribute("value", filename);
		try {
			quadMap.saveMap(this.canvas,filename);
		} catch (IOException e) {
			throw new IOException();
		}
	}


	public void rangeCities(Element commandNode, Document results, Element first) {
		int xcoord=Integer.parseInt(commandNode.getAttribute("x"));
		int ycoord=Integer.parseInt(commandNode.getAttribute("y"));
		int range=Integer.parseInt(commandNode.getAttribute("radius"));
		String filename=commandNode.getAttribute("saveMap");
		ArrayList<String> list=quadMap.rangeSearch(xcoord,ycoord,range);
		if(list.isEmpty()) {
			Element error =results.createElement("error");
			Element command=results.createElement("command");
			Element parameters=results.createElement("parameters");
			Element x=results.createElement("x");
			Element y=results.createElement("y");
			Element radius=results.createElement("radius");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			parameters.appendChild(x);
			parameters.appendChild(y);
			parameters.appendChild(radius);
			error.setAttribute("type","noCitiesExistInRange");
			command.setAttribute("name","rangeCities");
			x.setAttribute("value", String.valueOf((int) xcoord));
			y.setAttribute("value", String.valueOf((int) ycoord));
			radius.setAttribute("value",String.valueOf((int) range));
			if(!filename.isEmpty()) {
				Element savemap=results.createElement("saveMap");
				savemap.setAttribute("value",filename);
				parameters.appendChild(savemap);
			}
		}else {
			quadMap.drawCircle(this.canvas, xcoord, ycoord, range);
			Element success=results.createElement("success");
			Element command=results.createElement("command");
			Element parameters=results.createElement("parameters");
			Element x=results.createElement("x");
			Element y=results.createElement("y");
			Element radius=results.createElement("radius");
			Element output=results.createElement("output");
			Element citylist=results.createElement("cityList");
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			success.appendChild(output);
			output.appendChild(citylist);
			parameters.appendChild(x);
			parameters.appendChild(y);
			parameters.appendChild(radius);
			command.setAttribute("name","rangeCities");
			x.setAttribute("value", String.valueOf((int) xcoord));
			y.setAttribute("value", String.valueOf((int) ycoord));
			radius.setAttribute("value",String.valueOf((int) range));
			for(String name: list){
				Element city=results.createElement("city");
				citylist.appendChild(city);
				city.setAttribute("name", name);
				city.setAttribute("x",String.valueOf((int)nameMap.get(name).x));
				city.setAttribute("y",String.valueOf((int)nameMap.get(name).y));
				city.setAttribute("color",nameMap.get(name).color);
				city.setAttribute("radius",String.valueOf((int)nameMap.get(name).radius));
			}
			if(!filename.isEmpty()) {
				Element savemap=results.createElement("saveMap");
				savemap.setAttribute("value",filename);
				parameters.appendChild(savemap);
				quadMap.saveMap(this.canvas, filename);
			}
		}
	}


	public void nearestCity(Element commandNode, Document results, Element first) {
		int xcoord=Integer.parseInt(commandNode.getAttribute("x"));
		int ycoord=Integer.parseInt(commandNode.getAttribute("y"));
		if(quadMap.isEmpty() || nameMap.isEmpty() || coordMap.isEmpty()) {
			Element error=results.createElement("error");
			Element command=results.createElement("command");
			Element parameters=results.createElement("parameters");
			Element x=results.createElement("x");
			Element y=results.createElement("y");
			first.appendChild(error);
			error.appendChild(command);
			error.appendChild(parameters);
			parameters.appendChild(x);
			parameters.appendChild(y);
			error.setAttribute("type","mapIsEmpty");
			command.setAttribute("name","nearestCity");
			x.setAttribute("value", String.valueOf((int) xcoord));
			y.setAttribute("value", String.valueOf((int) ycoord));
		}else {
			String cityname=quadMap.nearestCity(xcoord,ycoord);			
			Element success=results.createElement("success");
			Element command=results.createElement("command");
			Element parameters=results.createElement("parameters");
			Element x=results.createElement("x");
			Element y=results.createElement("y");
			Element output=results.createElement("output");
			Element city=results.createElement("city");
			first.appendChild(success);
			success.appendChild(command);
			success.appendChild(parameters);
			success.appendChild(output);
			parameters.appendChild(x);
			parameters.appendChild(y);
			output.appendChild(city);
			command.setAttribute("name","nearestCity");
			x.setAttribute("value", String.valueOf((int) xcoord));
			y.setAttribute("value", String.valueOf((int) ycoord));
			city.setAttribute("name", cityname);
			city.setAttribute("x", String.valueOf((int)nameMap.get(cityname).x));
			city.setAttribute("y", String.valueOf((int)nameMap.get(cityname).y));
			city.setAttribute("color", nameMap.get(cityname).color);
			city.setAttribute("radius", String.valueOf((int)nameMap.get(cityname).radius));
		}
		
	}

	

}
