import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;


public class NumberOfIslands {
	public int numIslands(boolean[][] grid) {
        // write your code here
        int count=0;
        if(grid != null){
            Queue<ArrayList<Integer>> queue=new LinkedList<ArrayList<Integer>>();
            for(int i=0; i<grid.length; i++){
                for(int j=0; j<grid[0].length; j++){
                    if(grid[i][j]){
                        ArrayList<Integer> lst=new ArrayList<Integer>();
                        lst.add(i);
                        lst.add(j);
                    }
                }
            }
            while(!queue.isEmpty()) {
            	count++;
            	ArrayList<Integer> lst=queue.poll();
                Set<ArrayList<Integer>> set=findSurround(lst,grid);
                if(set!=null) {
                	for(ArrayList<Integer> s: set) {
                		if(s.get(0)!=null && s.get(1)!=null) {
                			if(grid[s.get(0)][s.get(1)]) {
                				queue.remove(s);
                			}
                		}
                	}
                }
            }

        }
        return count;
    }

	private Set<ArrayList<Integer>> findSurround(ArrayList<Integer> lst, boolean[][] grid) {
		// TODO Auto-generated method stub
		Set<ArrayList<Integer>> set=new HashSet<ArrayList<Integer>>();
		int i=lst.get(0);
		int j=lst.get(1);
		if( i-1>= 0 ) {
			ArrayList<Integer> temp=new ArrayList<Integer>();
			temp.add(i-1);
			temp.add(j);
			set.add(temp);
		}
		
		if(i+1 < grid.length ) {
			ArrayList<Integer> temp=new ArrayList<Integer>();
			temp.add(i+1);
			temp.add(j);
			set.add(temp);
		}
		
		if(j-1 >= 0) {
			ArrayList<Integer> temp=new ArrayList<Integer>();
			temp.add(i);
			temp.add(j-1);
			set.add(temp);
		}
		
		if(j+1 < grid[0].length) {
			ArrayList<Integer> temp=new ArrayList<Integer>();
			temp.add(i);
			temp.add(j+1);
			set.add(temp);
		}
		return set;
	}
}
