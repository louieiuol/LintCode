import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

public class TopologicalSorting {
	   class DirectedGraphNode {
		      int label;
		      ArrayList<DirectedGraphNode> neighbors;
		      DirectedGraphNode(int x) { 
		    	  label = x; neighbors = new ArrayList<DirectedGraphNode>(); 
		      }
		  }
	    /*
	     * @param graph: A list of Directed graph node
	     * @return: Any topological order for the given graph.
	     */
	    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
	        // write your code here
	    	ArrayList<DirectedGraphNode> result=new ArrayList<DirectedGraphNode>();
	    	if(graph!=null) {
	    		if(graph.size() >0) {
	    			DirectedGraphNode root=null;
	    			ArrayList<DirectedGraphNode> allnodes= new ArrayList<DirectedGraphNode>();
	    			HashMap<DirectedGraphNode, ArrayList<DirectedGraphNode>> map=new HashMap<DirectedGraphNode, ArrayList<DirectedGraphNode>>();
	    			Queue<DirectedGraphNode> queue=new LinkedList<DirectedGraphNode>();
	    			for(DirectedGraphNode node: graph) {
	    				map.put(node, node.neighbors);
	    			}
	    			//store nodes in HashMap
	    			for(DirectedGraphNode node: map.keySet()) {
	    				allnodes.addAll(map.get(node));
	    			}
	    			// get all nodes from node list
	    			for(DirectedGraphNode node: map.keySet()) {
	    				if(!allnodes.contains(node)) {
	    					root=node;
	    				}
	    			}
	    			//check if there exists an first node exists
	    			if(root==null) {
	    				return result;
	    			}
	    			//find the first node
	    			
	    			queue.add(root);
	    			while(!queue.isEmpty()) {
	    				int size=queue.size();
	    				for(int i=0; i<size ; i++) {
	    					DirectedGraphNode current=queue.poll();
	    					result.add(current);
	    					for(DirectedGraphNode node: map.get(current)) {
	    							queue.add(node);
	    					}
	    				}
	    			}	
	    		}
	    	}
	    	return result;
	    }
}
