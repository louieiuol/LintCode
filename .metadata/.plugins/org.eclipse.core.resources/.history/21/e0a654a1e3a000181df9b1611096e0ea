import java.awt.Point;
import java.util.LinkedList;
import java.util.Queue;

public class KnightShortestPath {
	public int shortestPath(boolean[][] grid, Point source, Point destination) {
        // write your code here
	       int[] dx= {1,1,-1,-1,2,2,-2,-2};
		   int[] dy= {2,-2,2,-2,1,-1,1,-1};
			int count=0;
	        if(grid !=null && source !=null && destination !=null ) {
	        	if(grid.length >0 && grid[0].length >0) {
	        			Queue<Point> queue=new LinkedList<Point>();
	        			queue.add(source);
	        			//grid[source.x][source.y]=true;
	        			while(!queue.isEmpty()) {
	        				count++;
	        				int size=queue.size();
	        				for(int i=0; i<size; i++) {
	        					Point point=queue.poll();
	        					if(point.x == destination.x && point.y == destination.y ) {
	        						return count;
	        					}
	        					for(int j=0; j<8 ; j++) {
	        						Point temp=new Point(point.x+dx[j], point.y+dy[j]);
	        						if(inBounds(grid, temp)) {
	        							if(grid[temp.x][temp.y]) {
	        									queue.add(temp);
	        									grid[temp.x][temp.y]=false;
	                                    }
	        						}
	        					}
	        				}
	        			}
	        		}  
	        }
	        return -1;
	    }

		private boolean inBounds(boolean[][] grid, Point temp) {
			// TODO Auto-generated method stub
			return temp.x >=0 && temp.y >=0 && temp.x <grid.length && temp.y < grid[0].length;
		}
}
