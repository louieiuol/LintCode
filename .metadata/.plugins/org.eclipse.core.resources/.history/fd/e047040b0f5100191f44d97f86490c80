package controllers;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.PriorityQueue;

import delivery.Order;
import delivery.Score;
import delivery.Time;

public class PriorityAlgorithm {
	private Time startDay;
	private Time endDay;
	private ArrayList<Order> datalist;
	private ArrayList<Order> sortedList;
	private ArrayList<Order> resList;
	private HashMap<Order, Score> scoreMap;
	private ArrayList<String> printList;
	private HashSet<Order> expiredOrder;
	private long lastTime;
	private int NPS;
	
	public PriorityAlgorithm(ArrayList<Order> datalist, Time startDay, Time endDay) {
		// TODO Auto-generated constructor stub
		this.startDay=startDay;
		this.endDay=endDay;
		this.resList=new ArrayList<Order>();
		this.datalist=datalist;
		scoreMap=new HashMap<Order, Score>();
		sortedList=new ArrayList<Order>();
		printList=new ArrayList<String>();
		NPS=0;
	}
	
	public void init() {
		if(datalist.isEmpty()) {
			return;
		}
		//order data filter
		PriorityQueue<Order> pq=new PriorityQueue<Order>(new OrderComparator());
		for(Order o: datalist) {
			if(o.isDeliverable()) {
				pq.add(o);
			}
		}
		sortedList.addAll(pq);
		pq.clear();
		if(sortedList.size() ==0) {
			printList.add("NPS:"+ getNPS(datalist,scoreMap));
			return;
		}
		lastTime=sortedList.get(0).getTime().getAbsoluteTime();
		lastTime=Math.max(lastTime, startDay.getAbsoluteTime());
		}
	
	public void printList(ArrayList<Order> lst) {
		for(Order o:lst) {
			System.out.println(o.toString());
		}
	}
	
	public void start() {
		if(sortedList.size() == 0) return;
		Order curr;
		int i=0;
		while(sortedList.size()>0) {
			//System.out.print("Sorted List is+");
			//printList(sortedList);
			ArrayList<Order> beforelist=findOrderBefore(sortedList, lastTime);
			//System.out.print("Before List:"+beforelist.size());
			//printList(beforelist);
			if(beforelist.size()> 0 && stillContainsDeliverable(beforelist, lastTime)) {
				removeExpired(beforelist, lastTime);
				ArrayList<Order> scoreList=findHighestScore(beforelist, lastTime);
				if(scoreList.size()>0) {
					curr= sortOnDistance(scoreList);
				}else {
					curr=findNextOrder(sortedList);
				}
			}else {
				//System.out.println("entered next");
				curr=findNextOrder(sortedList);
			}
			lastTime=Math.max(lastTime, curr.getTime().getAbsoluteTime());
			long start=lastTime;
			if(!curr.isDeliverable(start)) {
				sortedList.remove(curr);
				//System.out.println("not deliverable");
				continue;
			}
			//System.out.println("It is deliverable");
			long cost=curr.getPos().getOrderDistance();
			long receive=start + cost;
			long end=start+ cost*2;
			if(end > endDay.getAbsoluteTime()) {
				sortedList.remove(curr);
				//System.out.println("reach end of time");
				break;
			}
			Score score=new Score(new Time(curr.getTime().getAbsoluteTime()), new Time(receive));
			scoreMap.put(curr, score);
			resList.add(curr);
			Time prevTime=new Time(lastTime);
			Time receiveTime=new Time(receive);
			Time endTime=new Time(end);
		//	String str=curr.getId()+" "+ startTime.longToStr();
			String str=curr.getId()+" x: "+ curr.getPos().getxCoord()+ " y: " +curr.getPos().getyCoord() +
					" Time: "+curr.getTime().getHour()+ ":" +
						curr.getTime().getMinute()+": " +
						" Score: "+ score.getRank()+": "+" prev time:" +prevTime.getHour()+ ":" +prevTime.getMinute() + ", "
					+ "receive time: "+ receiveTime.getHour()+ ":" +receiveTime.getMinute() + ", " +
			 "end time: "+endTime.getHour()+ ":" +endTime.getMinute() + ", " +"\n";
			//System.out.print(str);
			lastTime=endTime.getAbsoluteTime();
			sortedList.remove(curr);
			printList.add(str);
		}
		System.out.println(getNPS(datalist, scoreMap));
		printList.add("NPS:"+ getNPS(datalist,scoreMap));
		this.NPS=getNPS(datalist,scoreMap);
	}
	
	private void removeExpired(ArrayList<Order> beforelist, long lasttime) {
		ArrayList<Order> removeList=new ArrayList<Order>();
		if(beforelist.isEmpty()) return removeList;
		for(Order o: beforelist) {
			if(getScore(o, lasttime).getRank() > 0) {
				removeList.add(o);
			}
		}
		return removeList;
	}

	private boolean stillContainsDeliverable(ArrayList<Order> beforelist, long last) {
		// TODO Auto-generated method stub
		for(Order o: beforelist) {
			if(o.isDeliverable(last)) {
				return true;
			}
		}
		return false;
	}

	private Order findNextOrder(ArrayList<Order> sortedList) {
		// TODO Auto-generated method stub
		if(sortedList==null) return null;
		if(sortedList.size() == 0) return null; 
		PriorityQueue<Order> pq=new PriorityQueue<Order>(new OrderComparator());
		pq.addAll(sortedList);
		return pq.peek();
	}

	private Order sortOnDistance(ArrayList<Order> scoreList) {
		// TODO Auto-generated method stub
		if(scoreList == null) return null;
		if(scoreList.size() == 0) return null;
		long maxDis=Long.MAX_VALUE;
		Order firstOrder=scoreList.get(0);
		for(Order o: scoreList) {
			if(o.getPos().getOrderDistance()< maxDis) {
				maxDis=o.getPos().getOrderDistance();
				firstOrder=o;
			}
		}
		return firstOrder;
	}

	private ArrayList<Order> findHighestScore(ArrayList<Order> lst, long last) {
		// TODO Auto-generated method stub
		HashMap<Integer, ArrayList<Order>> map=new HashMap<Integer, ArrayList<Order>>();
		map.put(2, new ArrayList<Order>());
		map.put(1, new ArrayList<Order>());
		map.put(0, new ArrayList<Order>());
		int maxScore=0;
		for(Order o: lst) {
			Score s=getScore(o, last);
			map.get(s.getRank()).add(o);
			if(maxScore < s.getRank()) {
				maxScore=s.getRank();
			}
		}
		return map.get(maxScore);
	}

	
	public int getTotalNPS() {
		return (int) this.NPS;
	}
	
	private Score getScore(Order o, long last) {
		// TODO Auto-generated method stub
		long start=last;
		if(!o.isDeliverable(start)) {
			return new Score(0, new Time(22, 0 ,1));
		}
		long cost=o.getPos().getOrderDistance();
		long receive=start + cost;
		long end=start+ cost*2;
		if(end > endDay.getAbsoluteTime()) {
			return new Score(0, new Time(22,0,1));
		}
		Score score=new Score(new Time(o.getTime().getAbsoluteTime()), new Time(end));
		return score;
	}

	private ArrayList<Order> findOrderBefore(ArrayList<Order> lst, long last) {
		ArrayList<Order> res=new ArrayList<>();
		if(lst!=null) {
			for(Order o: lst) {
				if(o.getTime().getAbsoluteTime() <= last) {
					if(!res.contains(o)) {
						res.add(o);
					}
				}
			}
		}
		return res;
	}

	public int getNPS(ArrayList<Order> lst, HashMap<Order, Score> map) {
		if (!lst.isEmpty()) {
			int promoter = 0;
			int neutral = 0;
			int detractor = 0;
			for (Order o : map.keySet()) {
				if (map.get(o).getRank() == 2)
					promoter++;
				else if (map.get(o).getRank() == 1)
					neutral++;
				else
					detractor++;
			}
			detractor = lst.size()-promoter-neutral;
			return (int) ( (promoter + 0.0) * 100 / lst.size() - (0.0 + detractor) * 100 / lst.size());
		} else {
			return 0;
		}
	}
	
	
	public ArrayList<String> getUnDeliveryOrder(){
		ArrayList<Order> udlist=new ArrayList<Order>();
		ArrayList<String> udlistPrint=new ArrayList<String>();
		for(Order od: datalist) {
			if(!resList.contains(od)){
				udlist.add(od);
			}
		}
		for(Order ud: udlist) {
			udlistPrint.add(ud.toString());
		}
		return udlistPrint;
	}
	

	public ArrayList<String> getPrint(){
		return printList;
	}

	class OrderComparator implements Comparator<Order> {
		@Override
		public int compare(Order o1, Order o2) {
			if(o1.getTime().getAbsoluteTime() == o2.getTime().getAbsoluteTime() || Order.withinShortTime(o1,o2)) {	
				if(o1.getPos().getOrderDistance() < o2.getPos().getOrderDistance()) return -1;
				else if(o1.getPos().getOrderDistance() > o2.getPos().getOrderDistance()) return 1;
				return 0;
			}else {
				return o1.compare(o2);
			}
		}
	}
}
