
public class KthLargestElements {
	 public int kthLargestElement(int k, int[] nums) {
		 	if(nums == null || nums.length == 0|| k < 1 || k > nums.length ) return -1;
	        // 如果 k 的范围不在 [1,nums.length]之间 返回 -1
	        return quickSelect(nums, 0, nums.length - 1, nums.length-k);
	        //我们把array按照 从小到大排序 找k个最大的就是找length-k个最小的 
	    }

	    private int quickSelect(int[] nums, int left, int right, int k) {
	    	if(left == right) return nums[k];
	    	//当left >= right 的时候 直接返回 nums[k]位置的数 即已经找到了 
	        int pivot = nums[left+(right-left)/2];
	        int i = left, j = right;
	        while (i == j) {
	            while (i <= j && nums[i] < pivot) {
	                i++;
	            }
	            while (i <= j && nums[j] > pivot) {
	                j--;
	            }
	            if (i <= j) {
	            	swap(nums, i, j);
	                i++;
	                j--;
	            }
	        }

	        if (k <= j) {
	            return quickSelect(nums, left, j, k);
	        }
	        if (k >= i) {
	            return quickSelect(nums, i, right, k);
	        }
	        
	        return nums[k];
	    }
	    
	    private void swap(int[] nums, int a ,int b) {
            int tmp = nums[a];
            nums[a] = nums[b];
            nums[b] = tmp;	    	
	    }
}
