Drone delivery challenge
Author: @Guanhua(Louie) Liu

Assumptions
For Order: 
1.A input file is not empty.
2.A input order format should follow: WM####[space](N/S)###(E/W)###[space]HH:MM:SS
	, and each order must begin with WM.
	, and each item is same line must split by space.
3.Each order Id should be unique.
4.Input order time always within a day long: 00:00:00 to 23:59:59
	, and we won't calculate situations longer than a day. 
5.Input order doesn't contain other data except order information.
		 
For Drone:
1.A drone can only carry one delivery each time it delivers.
2.A drone can only fly horizontally or vertically, not any other direction.
3.The warehouse locates at (0,0) in 2-d coordinate
4.After completed a task, a drone have to come back to warehouse to pick up next delivery.
5.We only have one drone, which is allowed to operate from 6 a.m. until 10 p.m each day.
6.This project is in ideal and 2-d situation. 
7.Other factors are negligible, such as customer picking order time, and drone down time to ground,
  and other accidents. 
  
For NPS: 
1.NPS is rounded to the nearest whole percentage.
2.NPS Calculation: (According to picture provided)
		 0 <= Waiting Time <= 1 hour 30 minutes                 : Promoters
		 1 hour 30 minutes < Waiting Time <= 3 hours 40 minutes : Neutral
		 3 hours 40 minutes < Waiting Time                      : Detractors
		 
Instructions
		        -----------------------------------------------------------------------------
				Prerequisite:
				              You must have installed JAVA 1.8 enviornment and JDK 
				---------------------------------------------------------------------- 
				Compile: 
				     1. Find the Java file  "DroneDeliveryChallenge.java" location 
				Or   1. Find the Jar file   "DroneDeliveryChallenge.jar" location  
				(If it is .java file, run command line:   
			  					"javac DroneDeliveryChallenge.java") 
				---------------------------------------------------------------------- 
				Usage(Jar File):   
				    java -jar DroneDeliveryChallenge.jar -input [input_file_path]    
				Or  java -jar DroneDeliveryChallenge.jar -input [input_file_path] -output [output_file_path]   
				Or  java -jar DroneDeliveryChallenge.jar -input [input_file_path] -mode [N]  
				Or  java -jar DroneDeliveryChallenge.jar -input [input_file_path] -output [output_file_path] -mode [N]
				  
				Usage(.class File):   
				    java DroneDeliveryChallenge.java -input [input_file_path]  
				Or  java DroneDeliveryChallenge.java -input [input_file_path] -output [output_file_path]  
				Or  java DroneDeliveryChallenge.java -input [input_file_path] -mode [N]  
				Or  java DroneDeliveryChallenge.java -input [input_file_path] -output [output_file_path] -mode [N]  
				----------------------------------------------------------------------- 
				Mode Options:   
				-mode      : N: Normal Use FIFO in time, shortest distance first, and pursue Score Maximize.   
				           : S: Simple  Use brute-force algorithm, but only allow orders less than 10.
				           : A: Advanced  Use random order algorithm, to find possible optimal solution.
				----------------------------------------------------------------------- 
				Get Help: 
				  	 java -jar DroneDeliveryChallenge.jar -help 
				Or	 java DroneDeliveryChallenge.java -help   
				----------------------------------------------------------------------- );
				
				
Steps
1. Read input file, parse each row as an Order.
2. Execute the required algorithm according to mode. 
3. Write solution into output file. 

Algorithms: 
1. Normal mode 
a. Use priority queue to sort all orders based on their time, if 2 orders are within 1 minute, we sorted by distance
	(Because we want to minimize waiting time)
b. Orders can come at beginning of day (0:00:00), but drone can start from (6:00:00), so we set our start time as (6:00:00)
c. We deal with the orders before the current time first, because we don't want waste time to waiting.
	(However, if all orders before the current time has detractor score, we may give up this order and accept next order)
d. If we still have orders to deliver, we find the highest score orders to be delivered, because of greedy algorithm.
	(If highest score are detractors, we accept order from after current time)
e. If we have more than 1 order have highest score, we search for farthest  order in time and distance closer to origin. 
	(earliest order may potential easy to expire promoter score time and we want come back time as early as possible, 
	so that we have more order choices to be selected from.)
f. we use ((current time-order time)-distance) here, but may need be some weighted factors for influences based on time and distance.
	(Since we lack of raw data to do experiment) 
g. find next order following same logic, find order has highest score, and sort then based of closest distance and less waiting time. 

2. Simple mode
a. Use brute force algorithm to calculate all permutations
b. Calculate all permutations scores, and find the optimal one
c. Use the optimal one as our solutions
d. When order number greater than 10, it will be less efficient

3. Advance mode
a. Follow the idea of heuristic algorithm, find greedy solution in normal mode, and take as our first generation
b. Store first generation's order and NPS
b. Randomly exchange two lines in the order permutation
c. If it is has greater NPS than current NPS, we have chance 0.9 to choose as our next generation
d. If it is has less NPS than current NPS, we have chance 0.1 to choose as our next generation
e. Run this in order size square times, to find the best solution

